Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
Python3	
1
class Solution:
2
    def lengthOfLongestSubstring(self, s: str) -> int:
3
        seen = {}
4
        start = 0
5
        end = 0
6
        longestLength = 0
7
        
8
        for i in range(len(s)):
9
            c = s[i]
10
​
11
            if c in seen and start <= seen[c] and seen[c] <= end:
12
                if end - start + 1 > longestLength:
13
                    longestLength = end - start + 1
14
                start = seen[c] + 1
15
​
16
            end = i
17
            seen[c] = i
18
        if end - start + 1 > longestLength and len(s) > 0:
19
            longestLength = end - start + 1
20
        return longestLength
21
        
